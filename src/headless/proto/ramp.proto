// RAMP Protocol Buffers definitions
// Conventions:
//
// Messages marked with a // STABLE comment are stable (their data layout is not expected to change)
// If messages are not marked with such their data layout may change

// This file isn't in the build anymore. flatbuffers FTW

syntax = "proto3";
option optimize_for = LITE_RUNTIME; // We don't need any reflection fluff
package ramp.proto;


// sent to server
message MouseMessage { // STABLE
    uint32 x = 1;
    uint32 y = 2;
    uint32 buttons = 3; // actually a bitset
}

message KeyMessage  { // STABLE 
    uint32 keysym = 1; // X11 keysym
    bool pressed = 2;
}


// sent from client->server

message AudioData { // STABLE
    bytes pcmData = 1;
}

message DisplayResize { // STABLE
    uint32 w = 1;
    uint32 h = 2;
}

message DisplayRect { // STABLE
    uint32 x = 1;
    uint32 y = 2;
    uint32 w = 3;
    uint32 h = 4;
    bytes rectData = 5;
}

// Management API
// This is currently a work in progress and may change


/// What media type
enum RemovableMediaInterface {
    FLOPPY = 0;
    CD = 1;
    MD = 2;
    CARTRIDGE = 3;
    ZIP = 4;
}


message Response { // STABLE (for now)
    enum Code {
        /// No error.
        SUCCESS = 0;

        /// Given path is too long. (may not be a real limitation)
        PATH_TOO_LONG = 1;

        /// The given filename doesn't exist
        FILE_DOESNT_EXIST = 2;
        
        //...
    }

    Code code = 1;
}

//message NetworkAdapter {   
//}

// Actual messages

message MountRemovableMedia {
    RemovableMediaInterface kind = 1; // Maybe a `MediaAddress` message?
    uint32 id = 2;
    string mediaPath = 3;
    bool writeProtect = 4;
}

message EjectRemovableMedia {
    RemovableMediaInterface kind = 1;
    uint32 id = 2;
}

message SetNetworkLink {
    uint32 id = 1;
    bool link = 2;
}

/// Hard-reset the emulated machine.
message HardReset {}